---
title: "R Notebook"
output: html_notebook
---



```{r}
library(tidyverse)
library(implyr)

```

```{r}
  impala <- src_impala(
    drv = odbc::odbc(),
    dsn = 'impaladsn' 
  )
  
  flog.info("aba.query_traits - establishing connection to database tables.")
  analyses_tbl <- tbl(impala, "ukbiobank.analyses")
  gwas_th_tbl  <- tbl(impala, "ukbiobank.gwas_results_top_hits")
  genes_tbl    <- tbl(impala, "ukbiobank.genes")
  colocs_tbl   <- tbl(impala, "ukbiobank.coloc_results")
  sites_tbl    <- tbl(impala, "ukbiobank.sites_ukb_500kv3")
  
  # Make a tmp table with our input traits
  traits     <- crossing(analysis_ids)
  dbExecute(impala, "DROP TABLE IF EXISTS kbs14104.tmp_traits_input PURGE")
  traits_tbl <- copy_to(dest = impala, 
                                df = traits,
                                name = "kbs14104.tmp_traits_input", 
                                overwrite = TRUE, 
                                temporary = FALSE)

  # filter gwas top hits for our traits
  th_tbl <- 
    inner_join(
      traits_tbl,
      gwas_th_tbl,
      by = c("analysis_ids" = "analysis")) %>% 
    select(analysis_ids, chrom, th_pos = pos_index, th_pval = min_pval)
    
  # Selet significant colocs for our traits
  colocs_tbl <- 
    inner_join(
      traits_tbl,
      colocs_tbl,
      by = c("analysis_ids" = "analysis2")
    ) %>% 
    filter(p12      >= 0.80 & 
           minpval1 <= 1e-4 &
           minpval2 <= 5e-8)
  
  # append gene info
  coloc_genes <- 
    left_join(
      colocs_tbl,
      genes_tbl %>% select(ensemblid, gene_start = pos_start, gene_end = pos_end, genetype, hgncid, chrom),
      by = c("entity" = "ensemblid")) %>% 
    filter(genetype == "protein_coding")
  
  coloc_gwas <- 
    left_join(
      coloc_genes,
      th_tbl,
      by = c("analysis_ids", "chrom")) %>% 
    mutate(log10_min_pval_colocGWAS_over_TopHitGWAS = log10(th_pval / minpval2)) %>% 
    filter(gene_start >= th_pos - 1e6 &
           gene_end   <= th_pos + 1e6 &
           log10_min_pval_colocGWAS_over_TopHitGWAS < 0.5)
  
  
  
  # Filter for significant results
  if(isTRUE(flatten_data)){
    flog.info("aba.query_traits - flattening data")
    flat_dat <-
      traits_colocs %>% 
      group_by(rsid) %>% 
      mutate(locus_n_genes   = n_distinct(ensemblid)) %>% 
      mutate(locus_n_tissue  = n_distinct(analysis1)) %>% 
      group_by(ensemblid) %>%
      mutate(gene_n_top_hits = n_distinct(rsid)) %>%
      mutate(gene_n_traits   = n_distinct(analysis2)) %>% 
      mutate(gene_n_tissue   = n_distinct(analysis1)) %>% 
      mutate(loci_max_n_genes  = case_when(gene_n_top_hits >  1 ~ max(locus_n_genes) %>% as.integer(), 
                                           gene_n_top_hits <= 1 ~ NA_integer_)) %>% 
      mutate(loci_min_n_genes  = case_when(gene_n_top_hits >  1 ~ min(locus_n_genes %>% as.integer()), 
                                           gene_n_top_hits <= 1 ~ NA_integer_)) %>% 
      mutate(loci_max_n_tissue = case_when(gene_n_top_hits >  1 ~ max(locus_n_tissue %>% as.integer()), 
                                           gene_n_top_hits <= 1 ~ NA_integer_)) %>% 
      mutate(loci_min_n_tissue = case_when(gene_n_top_hits >  1 ~ min(locus_n_tissue %>% as.integer()), 
                                           gene_n_top_hits <= 1 ~ NA_integer_)) %>% 
      ungroup() %>% 
      mutate(locus_n_genes     = case_when(gene_n_top_hits >  1 ~ NA_integer_,
                                           gene_n_top_hits <= 1 ~ locus_n_genes %>% as.integer())) %>% 
      mutate(locus_n_tissue    = case_when(gene_n_top_hits >  1 ~ NA_integer_,
                                           gene_n_top_hits <= 1 ~ locus_n_tissue %>% as.integer())) %>% 
      select(ensemblid, hgncid, 
             gene_n_traits, gene_n_tissue, gene_n_top_hits,
             locus_n_genes,     locus_n_tissue, 
             loci_max_n_genes,  loci_min_n_genes,
             loci_max_n_tissue, loci_min_n_tissue) %>% 
      distinct() %>% 
      arrange(gene_n_top_hits, gene_n_tissue, locus_n_genes) 
  }
```


